#!/usr/bin/python3

"""A Module that divides a Matrix"""


def matrix_divided(matrix, div):
    def matrix_divided(matrix, div):
        """Divide all elements of a matrix.

        Args:
        matrix (list): A list of lists of ints or floats.
        div (int/float): The divisor.
        Raises:
        TypeError: If the matrix contains non-numbers.
        TypeError: If the matrix contains rows of different sizes.
        TypeError: If div is not an int or float.
        ZeroDivisionError: If div is 0.
        Returns:
        A new matrix representing the result of the division.
        """
        if (not isinstance(matrix, list) or matrix == [] or
                not all(isinstance(row, list) for row in matrix) or
                not all((isinstance(ele, int) or isinstance(ele, float))
                        for ele in [num for row in matrix for num in row])):
            raise TypeError("matrix must be a matrix (list of lists) of\
                    integers/floats")

        if not all(len(row) == len(matrix[0]) for row in matrix):
            raise TypeError("Each row of the matrix must have the same size")

        if not isinstance(div, int) and not isinstance(div, float):
            raise TypeError("div must be a number")
        if div == 0:
            raise ZeroDivisionError("division by zero")

        return ([list(map(lambda x: round(x / div, 2), row))
                for row in matrix])

    """A function that divides a Matrix by div
    if div == 0:
        raise ZeroDivisionError("division by zero")
    if not isinstance(div, (int, float)):
        raise TypeError("div must be a number")
    divided_list = []
    for a_list in matrix:
        if not isinstance(a_list, list):
            raise TypeError("matrix must be a matrix(list of lists) of \
                    integers/floats")
        row = 0
        store = []
        for number in a_list:
            if not isinstance(number, (int, float)):
                raise TypeError("matrix must be a matrix(list of lists) of \
                        integers/floats")
            store.append(round(number/div, 2))
            row += 1
        # Not yet implemented checking for rows
        divided_list.append(store)
        check = row
        double_check = row
    return divided_list
    """
